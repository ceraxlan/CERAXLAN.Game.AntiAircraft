<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>